{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"python-build-utils","text":"<p>Small collection of command line utilities to assist with building your python wheels</p>"},{"location":"modules/","title":"Python Build Utils Modules","text":"<p>This module provides a command-line interface (CLI) for Python build utilities. It uses the <code>click</code> library to create a CLI group and add commands for renaming wheel files and removing tarballs.</p> <p>Functions:</p> Name Description <code>cli</code> <p>Defines the CLI group and adds commands for renaming wheel files and    removing tarballs.</p> <p>Commands:     rename_wheel_files: Command to rename wheel files.     remove_tarballs: Command to remove tarballs.</p> <p>This module provides functionality to create a wheel file from a .pyd file.</p> <p>Classes:</p> Name Description <code>PydFileFormatError</code> <p>Exception raised for errors in the .pyd file format.</p> <p>Functions:</p> Name Description <code>pyd2wheel</code> <p>Path, package_version: Optional[str | None] = None, abi_tag=Optional[str | None]) -&gt; Path: CLI interface for converting a .pyd file to a wheel file.</p> <code>convert_pyd_to_wheel</code> <p>Path, package_version: str | None = None, abi_tag: str | None = None) -&gt; Path:</p> <p>Remove the tar.gz files from the dist build folder.</p> <p>Rename wheel files in the dist folder of your python build directory to include platform and python version tags.</p>"},{"location":"modules/#python_build_utils.cli_tools.cli","title":"<code>cli()</code>","text":"<p>A collection of CLI tools for Python build utilities.</p> Source code in <code>src\\python_build_utils\\cli_tools.py</code> <pre><code>@click.group()\n@click.version_option(__version__, \"--version\", \"-v\", message=\"%(version)s\", help=\"Show the version and exit.\")\ndef cli() -&gt; None:\n    \"\"\"A collection of CLI tools for Python build utilities.\"\"\"\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel._create_metadata_file","title":"<code>_create_metadata_file(dist_info, name, package_version)</code>","text":"<p>Create the METADATA file.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>def _create_metadata_file(dist_info: Path, name: str, package_version: str) -&gt; None:\n    \"\"\"Create the METADATA file.\"\"\"\n    metadata_filename = dist_info / \"METADATA\"\n    metadata_content = _make_metadata_content(name, package_version)\n    with open(metadata_filename, \"w\", encoding=\"utf-8\") as f:\n        f.write(metadata_content)\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel._create_record_file","title":"<code>_create_record_file(root_folder, dist_info)</code>","text":"<p>Create the RECORD file.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>def _create_record_file(root_folder: Path, dist_info: Path) -&gt; None:\n    \"\"\"Create the RECORD file.\"\"\"\n    record_content = _make_record_content(root_folder)\n    record_filename = dist_info / \"RECORD\"\n    with open(record_filename, \"w\", encoding=\"utf-8\") as f:\n        f.write(record_content)\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel._create_wheel_archive","title":"<code>_create_wheel_archive(pyd_file, wheel_file_name, root_folder)</code>","text":"<p>Create the .whl file by zipping the contents of the temporary directory.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>def _create_wheel_archive(pyd_file: Path, wheel_file_name: str, root_folder: Path) -&gt; Path:\n    \"\"\"Create the .whl file by zipping the contents of the temporary directory.\"\"\"\n    wheel_file_path = pyd_file.parent / wheel_file_name\n    result_file = wheel_file_path.with_suffix(\".zip\")\n    if result_file.exists():\n        result_file.unlink()\n    created_name = shutil.make_archive(str(wheel_file_path), \"zip\", root_folder)\n    if wheel_file_path.exists():\n        wheel_file_path.unlink()\n    os.rename(created_name, wheel_file_path)\n    return wheel_file_path\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel._create_wheel_file","title":"<code>_create_wheel_file(dist_info, python_version, abi_tag, platform)</code>","text":"<p>Create the WHEEL file.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>def _create_wheel_file(dist_info: Path, python_version: str, abi_tag: str, platform: str) -&gt; None:\n    \"\"\"Create the WHEEL file.\"\"\"\n    wheel_content = _make_wheel_content(python_version, abi_tag, platform)\n    with open(dist_info / \"WHEEL\", \"w\", encoding=\"utf-8\") as f:\n        f.write(wheel_content)\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel._display_wheel_info","title":"<code>_display_wheel_info(name, package_version, python_version, platform, abi_tag)</code>","text":"<p>Display the wheel information.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>def _display_wheel_info(name: str, package_version: str, python_version: str, platform: str, abi_tag: str) -&gt; None:\n    \"\"\"Display the wheel information.\"\"\"\n    field_width = 25\n    click.echo(f\"{'=' * 80}\")\n    click.echo(f\"{'Field':&lt;{field_width}}{'Value'}\")\n    click.echo(f\"{'-' * 80}\")\n    click.echo(f\"{'Name:':&lt;{field_width}}{name}\")\n    click.echo(f\"{'Version:':&lt;{field_width}}{package_version}\")\n    click.echo(f\"{'Python Version:':&lt;{field_width}}{python_version}\")\n    click.echo(f\"{'Platform:':&lt;{field_width}}{platform}\")\n    click.echo(f\"{'ABI Tag:':&lt;{field_width}}{abi_tag}\")\n    click.echo(f\"{'-' * 80}\")\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel._extract_pyd_file_info","title":"<code>_extract_pyd_file_info(pyd_file)</code>","text":"<p>Extract the name, version, python version, and platform from the pyd file name.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>def _extract_pyd_file_info(pyd_file: Path) -&gt; tuple:\n    \"\"\"Extract the name, version, python version, and platform from the pyd file name.\"\"\"\n    # remove suffix and split the filename on the hyphens\n\n    if pyd_file.suffix != \".pyd\":\n        raise PydFileSuffixError(pyd_file.name)\n\n    bare_file_name = pyd_file.stem\n\n    # Assume the base_file_name is like:\n    #   dummy-0.1.0-py311-win_amd64\"  or\n    #   dummy-0.1.0.py311-win_amd64\"  or\n    # where the version can be 0, 0.1, or 0.1.1 and at least a python version and a platform are provided\n    match = re.match(r\"(.*?)-((?:\\d\\.){0,2}\\d)[.-](.*)-(.*)\", bare_file_name)\n    if match:\n        name, package_version, python_version, platform = match.groups()\n        return name, package_version, python_version, platform\n\n    # Assume base_file_name is like  DAVEcore.cp310-win_amd64\n    # i.e. the version is not provided and the build version and platform are separated by a dot\n    match = re.match(r\"(.*?)\\.(.*)-(.*)\", bare_file_name)\n    if match:\n        name, python_version, platform = match.groups()\n        package_version = None\n        return name, package_version, python_version, platform\n\n    raise PydFileFormatError(bare_file_name)\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel._get_package_version","title":"<code>_get_package_version(package_version, version_from_filename)</code>","text":"<p>Get the package version from the provided version or the pyd file name.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>def _get_package_version(package_version: str | None, version_from_filename: str | None) -&gt; str:\n    \"\"\"Get the package version from the provided version or the pyd file name.\"\"\"\n    if package_version is None and version_from_filename is not None:\n        return version_from_filename\n\n    if package_version is None:\n        raise VersionNotFoundError\n\n    return package_version\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel._make_metadata_content","title":"<code>_make_metadata_content(name, version)</code>","text":"<p>Create the metadata for the wheel file.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>def _make_metadata_content(name: str, version: str) -&gt; str:\n    \"\"\"Create the metadata for the wheel file.\"\"\"\n    meta_data = \"Metadata-Version: 2.1\\n\"\n    meta_data += f\"Name: {name}\\n\"\n    meta_data += f\"Version: {version}\\n\"\n    return meta_data\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel._make_record_content","title":"<code>_make_record_content(root_folder)</code>","text":"<p>Create the RECORD file content for the wheel.</p> <p>RECORD is a list of (almost) all the files in the wheel and their secure hashes.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>def _make_record_content(root_folder: Path) -&gt; str:\n    \"\"\"Create the RECORD file content for the wheel.\n\n    RECORD is a list of (almost) all the files in the wheel and their secure hashes.\n    \"\"\"\n    record_content = \"\"\n    # loop over all the files in the wheel and add them to the RECORD file\n    for root, _, files in os.walk(root_folder):\n        for file in files:\n            # get the hash of the file using sha256\n            sha256_hash = hashlib.sha256()\n\n            file_path = os.path.join(root, file)\n            with open(file_path, \"rb\") as f:\n                while chunk := f.read(4096):  # Read in 4KB chunks\n                    sha256_hash.update(chunk)\n\n            sha256_digest = sha256_hash.hexdigest()\n\n            file_size_in_bytes = os.path.getsize(os.path.join(root, file))\n\n            # officially the HASH should be added here\n            record_content += f\"{root}/{file},sha256={sha256_digest},{file_size_in_bytes}\\n\"\n\n    # add record itself\n    record_content += f\"{root_folder}/RECORD,,\\n\"\n    return record_content\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel._make_wheel_content","title":"<code>_make_wheel_content(python_version, abi_tag, platform)</code>","text":"<p>Create the wheel data for the wheel file.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>def _make_wheel_content(python_version: str, abi_tag: str, platform: str) -&gt; str:\n    \"\"\"Create the wheel data for the wheel file.\"\"\"\n    wheel_data = \"Wheel-Version: 1.0\\n\"\n    wheel_data += \"Generator: bdist_wheel 1.0\\n\"\n    wheel_data += \"Root-Is-Purelib: false\\n\"\n    wheel_data += f\"Tag: {python_version}-{abi_tag}-{platform}\\n\"\n    wheel_data += \"Build: 1\"\n    return wheel_data\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel.convert_pyd_to_wheel","title":"<code>convert_pyd_to_wheel(pyd_file, package_version=None, abi_tag=None)</code>","text":"<p>Creates a wheel from a .pyd file.</p> <p>Parameters:</p> Name Type Description Default <code>pyd_file</code> <code>Path</code> <p>The path to the .pyd file.</p> required <code>package_version</code> <code>str | None</code> <p>The version of the package. If not provided, it will be extracted from the filename. Defaults to None.</p> <code>None</code> <code>abi_tag</code> <code>str | None</code> <p>The ABI tag for the wheel. If not provided, defaults to \"none\".</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path | None</code> <p>The path to the created wheel file.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>def convert_pyd_to_wheel(pyd_file: Path, package_version: str | None = None, abi_tag: str | None = None) -&gt; Path | None:\n    \"\"\"\n    Creates a wheel from a .pyd file.\n\n    Args:\n        pyd_file (Path): The path to the .pyd file.\n        package_version (str | None, optional): The version of the package. If not provided, it will be extracted\n            from the filename. Defaults to None.\n        abi_tag (str | None, optional): The ABI tag for the wheel. If not provided, defaults to \"none\".\n\n    Returns:\n        Path: The path to the created wheel file.\n    \"\"\"\n    pyd_file = Path(pyd_file)\n    try:\n        name, version_from_filename, python_version, platform = _extract_pyd_file_info(pyd_file)\n    except (PydFileFormatError, PydFileSuffixError) as e:\n        click.echo(e, err=True)\n        return None\n\n    try:\n        package_version = _get_package_version(package_version, version_from_filename)\n    except VersionNotFoundError as e:\n        click.echo(e, err=True)\n        return None\n\n    if abi_tag is None:\n        abi_tag = \"none\"\n\n    _display_wheel_info(name, package_version, python_version, platform, abi_tag)\n\n    wheel_file_name = f\"{name}-{package_version}-{python_version}-{abi_tag}-{platform}.whl\"\n    root_folder = create_temp_directory(pyd_file)\n    dist_info = create_dist_info_directory(root_folder, name, package_version)\n\n    _create_metadata_file(dist_info, name, package_version)\n    _create_wheel_file(dist_info, python_version, abi_tag, platform)\n    _create_record_file(root_folder, dist_info)\n\n    wheel_file_path = _create_wheel_archive(pyd_file, wheel_file_name, root_folder)\n    click.echo(f\"created wheel file: {wheel_file_path}\")\n    click.echo(f\"{'-' * 80}\")\n\n    shutil.rmtree(root_folder)\n    return wheel_file_path\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel.create_dist_info_directory","title":"<code>create_dist_info_directory(root_folder, name, package_version)</code>","text":"<p>Create the .dist-info directory.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>def create_dist_info_directory(root_folder: Path, name: str, package_version: str) -&gt; Path:\n    \"\"\"Create the .dist-info directory.\"\"\"\n    dist_info = root_folder / f\"{name}-{package_version}.dist-info\"\n    dist_info.mkdir(exist_ok=True)\n    return dist_info\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel.create_temp_directory","title":"<code>create_temp_directory(pyd_file)</code>","text":"<p>Create a temporary directory to store the contents of the wheel file.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>def create_temp_directory(pyd_file: Path) -&gt; Path:\n    \"\"\"Create a temporary directory to store the contents of the wheel file.\"\"\"\n    root_folder = pyd_file.parent / \"wheel_temp\"\n    root_folder.mkdir(exist_ok=True)\n    shutil.copy(pyd_file, root_folder / pyd_file.name)\n    return root_folder\n</code></pre>"},{"location":"modules/#python_build_utils.pyd2wheel.pyd2wheel","title":"<code>pyd2wheel(pyd_file, package_version=None, abi_tag=None)</code>","text":"<p>Create a wheel from a compiled python *.pyd file.</p> Source code in <code>src\\python_build_utils\\pyd2wheel.py</code> <pre><code>@click.command(name=\"pyd2wheel\")\n@click.version_option(__version__, \"--version\", \"-v\", message=\"%(version)s\", help=\"Show the version and exit.\")\n@click.argument(\"pyd_file\", type=click.Path(exists=True))\n@click.option(\"--package_version\", help=\"The version of the package.\", default=None)\n@click.option(\"--abi_tag\", help=\"The ABI tag of the package. Default is 'none'.\", default=None)\ndef pyd2wheel(pyd_file: Path, package_version: str | None = None, abi_tag: str | None = None) -&gt; Path | None:\n    \"\"\"Create a wheel from a compiled python *.pyd file.\"\"\"\n\n    return convert_pyd_to_wheel(pyd_file, package_version, abi_tag)\n</code></pre>"},{"location":"modules/#python_build_utils.remove_tarballs.remove_tarballs","title":"<code>remove_tarballs(dist_dir)</code>","text":"<p>Remove tarball files from dist.</p> <p>This function removes tarball files from the given distribution directory.</p> <p>Parameters:</p> Name Type Description Default <code>dist_dir</code> <code>str</code> <p>The directory containing the tarball files to be removed.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example <p>remove_tarballs(\"dist\")</p> Source code in <code>src\\python_build_utils\\remove_tarballs.py</code> <pre><code>@click.command(name=\"remove-tarballs\")\n@click.version_option(__version__, \"--version\", \"-v\", message=\"%(version)s\", help=\"Show the version and exit.\")\n@click.option(\n    \"--dist_dir\",\n    default=\"dist\",\n    help=textwrap.dedent(\"\"\"\n    Directory containing wheel the files.\n    Default is 'dist'\n\"\"\"),\n)\ndef remove_tarballs(dist_dir: str) -&gt; None:\n    \"\"\"Remove tarball files from dist.\n\n    This function removes tarball files from the given distribution directory.\n\n    Args:\n        dist_dir (str): The directory containing the tarball files to be removed.\n\n    Returns:\n        None\n\n    Example:\n        remove_tarballs(\"dist\")\n    \"\"\"\n\n    dist_dir = dist_dir.rstrip(\"/\")\n\n    found_files = False\n\n    for tarball_file in glob.glob(f\"{dist_dir}/*.tar.gz\"):\n        found_files = True\n        try:\n            os.remove(tarball_file)\n        except FileNotFoundError as e:\n            click.echo(f\"Error {e}\")\n        else:\n            click.echo(f\"Removed {tarball_file}\")\n\n    if not found_files:\n        click.echo(f\"No tarball files found in {dist_dir}\")\n</code></pre>"},{"location":"modules/#python_build_utils.rename_wheel_files.rename_wheel_files","title":"<code>rename_wheel_files(dist_dir, python_version_tag, platform_tag, wheel_tag)</code>","text":"<p>Rename wheel files in the dist folder.</p> <p>This function renames wheel files in the given distribution directory by replacing the \"py3-none-any\" tag with a custom build version tag. The build version tag is constructed using the provided <code>python_version_tag</code>, <code>platform_tag</code>, and <code>wheel_tag</code>. If <code>wheel_tag</code> is provided, it is used directly as the build version tag. Otherwise, the build version tag is constructed using the <code>python_version_tag</code> and <code>platform_tag</code>.</p> <p>Args:</p> <pre><code>dist_dir (str): The directory containing the wheel files to be renamed.\nDefault is 'dist'.\n\npython_version_tag (str): The Python version tag to be included in the\nnew file name. Default is cp{major}{minor}.\n\nplatform_tag (str): The platform tag to be included in the new file\nname. Default is sysconfig.get_platform().\n\nwheel_tag (str): The custom wheel tag to be used as the build version\ntag. If this is provided, it is used directly as the build version tag\nand the other tags are ignored. If this is not provided, the build\ntag is constructed using the `python_version_tag` and `platform_tag` as\ndescribed above.\n</code></pre> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example <p>rename_wheel_files(\"dist\", \"cp39\", \"win_amd64\", \"\")</p> Source code in <code>src\\python_build_utils\\rename_wheel_files.py</code> <pre><code>@click.command(name=\"rename-wheel-files\")\n@click.version_option(__version__, \"--version\", \"-v\", message=\"%(version)s\", help=\"Show the version and exit.\")\n@click.option(\"--dist_dir\", default=\"dist\", help=\"Directory containing wheel files. Default is 'dist'\")\n@click.option(\"--python_version_tag\", help=\"Explicitly specify the python version tag. Default is cp{major}{minor}\")\n@click.option(\"--platform_tag\", help=\"Explicitly specify the platform tag. Default is sysconfig.get_platform()\")\n@click.option(\n    \"--wheel_tag\",\n    help=textwrap.dedent(\"\"\"\n    Explicitly specify the total wheel tag.\n    Default is {python_version_tag}-{python_version_tag}-{platform_tag}\n    \"\"\"),\n)\ndef rename_wheel_files(dist_dir: str, python_version_tag: str, platform_tag: str, wheel_tag: str) -&gt; None:\n    \"\"\"Rename wheel files in the dist folder.\n\n    This function renames wheel files in the given distribution directory by\n    replacing the \"py3-none-any\" tag with a custom build version tag. The\n    build version tag is constructed using the provided `python_version_tag`,\n    `platform_tag`, and `wheel_tag`. If `wheel_tag` is provided, it is used\n    directly as the build version tag. Otherwise, the build version tag is\n    constructed using the `python_version_tag` and `platform_tag`.\n\n    Args:\n\n        dist_dir (str): The directory containing the wheel files to be renamed.\n        Default is 'dist'.\n\n        python_version_tag (str): The Python version tag to be included in the\n        new file name. Default is cp{major}{minor}.\n\n        platform_tag (str): The platform tag to be included in the new file\n        name. Default is sysconfig.get_platform().\n\n        wheel_tag (str): The custom wheel tag to be used as the build version\n        tag. If this is provided, it is used directly as the build version tag\n        and the other tags are ignored. If this is not provided, the build\n        tag is constructed using the `python_version_tag` and `platform_tag` as\n        described above.\n\n    Returns:\n        None\n\n    Example:\n        rename_wheel_files(\"dist\", \"cp39\", \"win_amd64\", \"\")\n    \"\"\"\n\n    if wheel_tag:\n        build_version_tag = wheel_tag\n    else:\n        if not python_version_tag:\n            python_version_tag = f\"cp{sys.version_info.major}{sys.version_info.minor}\"\n        if not platform_tag:\n            platform_tag = sysconfig.get_platform().replace(\"-\", \"_\")\n        build_version_tag = f\"{python_version_tag}-{python_version_tag}-{platform_tag}\"\n\n    dist_dir = dist_dir.rstrip(\"/\")\n\n    found_files = False\n\n    for wheel_file in glob.glob(f\"{dist_dir}/*py3-none-any.whl\"):\n        found_files = True\n        new_file = wheel_file.replace(\"py3-none-any.whl\", f\"{build_version_tag}.whl\")\n        try:\n            os.rename(wheel_file, new_file)\n        except FileExistsError as e:\n            click.echo(f\"Error {e}\")\n        else:\n            click.echo(f\"Renamed {wheel_file} -&gt; {new_file}\")\n\n    if not found_files:\n        click.echo(f\"No wheel files found in {dist_dir}\")\n</code></pre>"}]}